import{_ as s,c as a,o as i,a5 as t}from"./chunks/framework.DmeutZ2o.js";const e="/toy-ros/assets/start-container-in-vscode.BzUctp3C.png",n="/toy-ros/assets/reopen-container-in-vscode-without-cache.DPuoee9i.png",l="/toy-ros/assets/docker-desktop-running-container.CG06XBwx.png",y=JSON.parse('{"title":"启动项目","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"starter/starter.md","filePath":"starter/starter.md","lastUpdated":1736351582000}'),p={name:"starter/starter.md"},h=t(`<h1 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="在-ubuntu-中安装-ros2" tabindex="-1">在 Ubuntu 中安装 ROS2 <a class="header-anchor" href="#在-ubuntu-中安装-ros2" aria-label="Permalink to &quot;在 Ubuntu 中安装 ROS2&quot;">​</a></h3><p>可以参考 <a href="https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97" target="_blank" rel="noreferrer">一行代码搭建机器人开发环境(ROS/ROS2/ROSDEP)</a> 进行安装，这是国内的一个 ROS 社区，提供了一键安装脚本，例如 <a href="https://fishros.org.cn/forum/topic/2600/ros2-2024-%E6%9C%80%E6%96%B0%E7%89%88-jazzy-%E5%8F%91%E5%B8%83-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%B7%B2%E6%94%AF%E6%8C%81" target="_blank" rel="noreferrer">ROS2 2024 Jazzy 版本的安装</a></p><h3 id="从容器中运行-ros2" tabindex="-1">从容器中运行 ROS2 <a class="header-anchor" href="#从容器中运行-ros2" aria-label="Permalink to &quot;从容器中运行 ROS2&quot;">​</a></h3><p>项目可以直接从 <strong>VSCode</strong> 启动 ROS2 (Jazzy) 的容器，在这之前，需要做以下准备：</p><ol><li>获取 ROS2 的公钥环文件</li></ol><p>执行以下命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/get-ros-key.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zsh scripts/get-ros-key.sh # for zsh(macOS)</span></span></code></pre></div><p>在项目的 <code>dockerfiles/Dockerfile</code> 中，会执行 <code>COPY ./.cache/ros.key /usr/share/keyrings/ros-archive-keyring.gpg</code></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>在编译镜像、启动容器前建议先拉取下面的镜像（可能需要全局代理）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ros:jazzy-ros-base-noble</span></span></code></pre></div><p>随后，（亲测）需要关掉代理，在没有代理的情况下编译镜像。这是由于 Dockerfile 中使用了 TUNA 源获取 apt 软件包，而科学上网的环境可能导致容器内无法访问 TUNA 源。编译完镜像并容器成功启动后，就可以继续使用科学上网了</p></div><p>在左下角远程开发的图标中，启动容器（首次启动容器会先编译镜像，这个过程可以认为是安装操作系统和软件）</p><p><img src="`+e+'" alt="vscode"></p><p>如果启动失败，需要启动命令面板(<code>cmd+shift+p</code>/<code>ctrl+shift+p</code>)，选择<em>在无缓存的情况下重新生成并重新打开容器</em>，如下图</p><p><img src="'+n+'" alt="vscode"></p><p>之后再启动容器，就不会再重复编译镜像，除非对 Dockerfile 文件进行了修改</p><p>启动容器后也可以在 Docker Desktop 中查看容器的运行状态</p><p><img src="'+l+`" alt="docker-desktop"></p><h3 id="图形界面" tabindex="-1">图形界面 <a class="header-anchor" href="#图形界面" aria-label="Permalink to &quot;图形界面&quot;">​</a></h3><h4 id="macos" tabindex="-1">macOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;macOS&quot;">​</a></h4><p>安装 XQuartz 以在 MacOS 上获得 X11 支持. 您可以从其<a href="https://www.xquartz.org" target="_blank" rel="noreferrer">官方网站</a>下载，或使用 HomeBrew 安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS安装xquartz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xquartz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cask</span></span></code></pre></div><p>启动xquartz，实测 <code>Allow connections from clients</code> 选项非必须条件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Applications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Utilities</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> XQuartz.app</span></span></code></pre></div><p>启动后输入以下命令，允许其他用户连接</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># access control disabled, clients can connect from any host</span></span></code></pre></div><p>随后启动容器，在容器中输入如下命令，检查是否可以显示图形界面（会弹出一个时钟窗口）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xclock</span></span></code></pre></div><p>如果出现报错如下，可能需要重启容器或者需要在 XQuartz 中重新执行 <code>xhost +</code> 命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Authorization</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> but</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authorization</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specified</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Can&#39;t open display: host.docker.internal:0</span></span></code></pre></div><p>能使用图形界面是由于在启动容器时，使用了 <code>-e DISPLAY=host.docker.internal:0</code> 参数，将主机的 X11 显示器映射到容器中，在 <code>docker-compose.yml</code> 可以找到这个参数</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  &lt;service_name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISPLAY=host.docker.internal:0</span></span></code></pre></div><h3 id="启动-ros-demo" tabindex="-1">启动 ROS demo <a class="header-anchor" href="#启动-ros-demo" aria-label="Permalink to &quot;启动 ROS demo&quot;">​</a></h3><p>在终端中启动 ROS2 的小乌龟demo</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> turtlesim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> turtlesim_node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [INFO] [1735910105.083618756] [turtlesim]: Starting turtlesim with node name /turtlesim</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [INFO] [1735910105.098834214] [turtlesim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]</span></span></code></pre></div><p>在另一个终端中启动键盘控制小乌龟</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> turtlesim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> turtle_teleop_key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Reading from keyboard</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ---------------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use arrow keys to move the turtle.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use g|b|v|c|d|e|r|t keys to rotate to absolute orientations. &#39;f&#39; to cancel a rotation.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;q&#39; to quit.</span></span></code></pre></div><p>到此，ROS2 的基本安装</p><h3 id="启动-rviz2" tabindex="-1">启动 Rviz2 <a class="header-anchor" href="#启动-rviz2" aria-label="Permalink to &quot;启动 Rviz2&quot;">​</a></h3><p>在终端中启动 Rviz2</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rviz2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rviz2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or just</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># rviz2</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>如果您正在使用 macOS，并通过容器的方式启动 rviz2 ，那么可能无法启动成功，这似乎是与 OpenGL 的版本有关，参考<a href="https://github.com/ros2/rviz/issues/929" target="_blank" rel="noreferrer">Impossible to run Rviz2 from a Docker container on Apple Silicon #929</a>，如果您有好的办法可以解决这个问题，欢迎提 <a href="https://github.com/henryzhuhr/toy-ros/issues" target="_blank" rel="noreferrer">issue</a> 或者 <a href="https://github.com/henryzhuhr/toy-ros/pulls" target="_blank" rel="noreferrer">PR</a></p></div>`,42),r=[h];function o(k,c,d,g,u,b){return i(),a("div",null,r)}const m=s(p,[["render",o]]);export{y as __pageData,m as default};
