import{_ as a,c as e,o as s,a5 as t}from"./chunks/framework.DmeutZ2o.js";const g=JSON.parse('{"title":"脚本","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"development/scripts.md","filePath":"development/scripts.md","lastUpdated":1736351582000}'),i={name:"development/scripts.md"},o=t('<h1 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h1><p>项目中包含了大量的脚本，在此文档中记录并说明如何使用</p><ul><li><a href="#🛜-获取网络资源">获取网络资源</a></li></ul><table tabindex="0"><thead><tr><th>脚本</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-pull-ros.sh</code></td><td><a href="#获取-ros-的-docker-镜像">获取 ROS 的 Docker 镜像</a></td></tr><tr><td><code>get-ros-key.sh</code></td><td><a href="#获取-ros2-的公钥环文件">获取 ROS2 的公钥环文件</a></td></tr></tbody></table><ul><li><a href="#🤖-ros-相关脚本">ROS 相关脚本</a></li></ul><table tabindex="0"><thead><tr><th>脚本</th><th>说明</th></tr></thead><tbody><tr><td><code>create-ros-package.sh</code></td><td><a href="#创建-ros-包">创建 ROS 包</a></td></tr></tbody></table><h2 id="脚本列表" tabindex="-1">脚本列表 <a class="header-anchor" href="#脚本列表" aria-label="Permalink to &quot;脚本列表&quot;">​</a></h2><h3 id="🛜-获取网络资源" tabindex="-1">🛜 获取网络资源 <a class="header-anchor" href="#🛜-获取网络资源" aria-label="Permalink to &quot;🛜 获取网络资源&quot;">​</a></h3><h4 id="获取-ros-的-docker-镜像" tabindex="-1">获取 ROS 的 Docker 镜像 <a class="header-anchor" href="#获取-ros-的-docker-镜像" aria-label="Permalink to &quot;获取 ROS 的 Docker 镜像&quot;">​</a></h4><p>在编译镜像 <code>dockerfiles/*</code> 的时候可能需要获取一些网络资源，例如 ROS 的镜像</p><p>这些资源可能需要🪜全局代理，因此集中放置在脚本中，在容器启动前执行避免编译镜像失败</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/docker-pull.sh</span></span></code></pre></div><h4 id="获取-ros2-的公钥环文件" tabindex="-1">获取 ROS2 的公钥环文件 <a class="header-anchor" href="#获取-ros2-的公钥环文件" aria-label="Permalink to &quot;获取 ROS2 的公钥环文件&quot;">​</a></h4><p>获取 ROS2 的公钥环文件，在容器安装</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/get-ros-key.sh</span></span></code></pre></div><h3 id="🤖-ros-相关脚本" tabindex="-1">🤖 ROS 相关脚本 <a class="header-anchor" href="#🤖-ros-相关脚本" aria-label="Permalink to &quot;🤖 ROS 相关脚本&quot;">​</a></h3><h4 id="创建-ros-包" tabindex="-1">创建 ROS 包 <a class="header-anchor" href="#创建-ros-包" aria-label="Permalink to &quot;创建 ROS 包&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/create-ros-package.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [package_group] [package_name]</span></span></code></pre></div><p>需要指定包的分组 <code>package_group</code> 和包的名称 <code>package_name</code></p><p>例如，创建一个名为 <code>my_package</code> 的包，分组为 <code>my_group</code>。如果不指定，这将是默认参数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/create-ros-package.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_package</span></span></code></pre></div><p>执行后，会在 <code>modules/my_group</code> 目录下创建一个名为 <code>my_package</code> 的 ROS 包 (C++) 和 <code>my_package_py</code> 的 ROS 包 (Python)，如果不需要相关语言的包，可以自行删除</p>',22),h=[o];function d(r,p,c,l,n,k){return s(),e("div",null,h)}const u=a(i,[["render",d]]);export{g as __pageData,u as default};
